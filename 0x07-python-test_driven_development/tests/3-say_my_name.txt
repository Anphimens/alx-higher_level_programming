# 3-say_my_name.txt


========================
How to use 3-say_my_name
========================

This modules defines a function ``say_my_name(first_name, last_name)``.

Usage
=====

``say_my_name(...)`` prints "My name is <first_name> <last_name>".

::

    >>> say_my_name = __import__('3-say_my_name').say_my_name
    >>> say_my_name("Antoinette", "Mensah")
    My name is Antoinette Mensah

::

    >>> say_my_name("Prophet Dadzie", "Gabriel Jnr")
    My name is Prophet Dadzie Gabriel Jnr

The parameter  ```last_name``` is optional. If no last name is provided,
an empty string is printed instead.

::

    >>> say_my_name("Antoinette P")
    My name is Antoinette P 

Invalid Names
=============

The parameters ``first_name`` and ``last_name`` must be strings.
Otherwise a TypeError is raised.

::

    >>> say_my_name(6, "Anthony")
    Traceback (most recent call last):
    TypeError: first_name must be a string

::

    >>> say_my_name("LeBene", ["Frans", "Luke", "Water"])
    Traceback (most recent call last):
    TypeError: last_name must be a string

::

    >>> say_my_name({"LeBene": 6, "James": 23}, 7.7)
    Traceback (most recent call last):
    TypeError: first_name must be a string

::

    >>> say_my_name(None)
    Traceback (most recent call last):
    TypeError: first_name must be a string

At least one name must be provided.

::

    >>> say_my_name()
    Traceback (most recent call last):
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'
